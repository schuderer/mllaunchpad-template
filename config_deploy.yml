#plugins:
#  - examples.bogusdatasource

datasources:
  petals:
    type: csv
    path: ./private/iris_train.csv  # The string can also be a URL. Valid URL schemes include http, ftp, s3, and file.
    expires: 0  # -1: never (=cached forever), 0: immediately (=no caching), >0: time in seconds.
    options: {}
    tags: train
  petals_test:
    type: csv
    path: ./private/iris_holdout.csv  # The string can also be a URL. Valid URL schemes include http, ftp, s3, and file.
    expires: 3600  # -1: never (=cached forever), 0: immediately (=no caching), >0: time in seconds.
    options: {}
    tags: test

model_store:
  location: model_store  # TODO: maybe support sftp or other remote locations...

model:
  name: IrisModel
  version: '0.0.5'  # use semantic versioning (<breaking>.<adding>.<fix>), first segment will be used in url as e.g. .../v1/...
  module: app.model  # same as file name without .py
  train_options: {}
  predict_options: {}

api:
  name: iris  # name of the service api
  raml: api.raml
  preload_datasources: True  # Load datasources into memory before any predictions. Only makes sense with caching.
  root_path: .  # (optional) set directory where Flask should look for the directories `static` and `templates` to serve.

deploy:
  include: # Files/patterns that should be added to the zipped deployment artifact. Uses recursion.
    - app/*
    - '*.yml'
    - '*.raml'
    # - wheels/*  # Needed if you need to include dependencies in the deployment artifact (used with "requirements:save_to")
    - model_store/*
  exclude:  # Exclude files with any of these strings in their path
    - __pycache__
    - config_tpl.yml
    - config_dev.yml
  requirements:
    python: '3.6'
    platforms: [manylinux2010_x86_64, manylinux1_x86_64, linux_x86_64]  # manylinux2010 only supported by pip>=19.0
    file: requirements.txt  # Please use frozen requirements for reproducibility. How to create: https://github.com/schuderer/mllaunchpad/issues/60
    # save_to: wheels  # Optional. Download the dependencies as wheels to this location and include it within the deployment artifact. Leave out or empty to have server deployment install dependencies from a package repository (PyPI or as specified in pip_index_url) instead.
    vulnerability_db: C:/dev/python_vulnerability_db  # If empty string "", tries to get information from pyup's safety-db website (source: https://raw.githubusercontent.com/pyupio/safety-db/master/data/)
    pip_index_url: ""  # Optionally use another package repository (such as an in-company proxy like Nexus). Empty string "" to use the default (which is usually pypi.org, but depends on your pip config).
    pip_cert: ""  # Optional certificate for pip to use. Commonly used for company-internal/self-signed certificates.
    pip_trusted_hosts: []  # Optional host and port for specified index-url. WARNING: Only ever use when told to use, and even then only as an exception, and only for hosts in the local network!
  deployment_requires: []  # external files or directories that have to exist on the server
  # A test query (only the part that comes after e.g. /apiname/v1/) to be called regularly to test your API:
  # Note: If your model does batch prediction or has side effects that are not useful to trigger for test purposes
  #       every few seconds or so, please define your parameters in the raml in a way so you can branch in your
  #       prediction code, avoiding unnecessary server load or unintended side effects.
  #       E.g. make all query parameters optional and add another query parameter "heartbeat", and in the code,
  #       check "if 'heartbeat' in args_dict:...".
  test_query: varieties?sepal.length=4.9&sepal.width=2.4&petal.length=3.3&petal.width=1


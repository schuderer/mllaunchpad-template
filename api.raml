#%RAML 0.8
---
title: Iris Variety Prediction API
baseUri: https://{host}/iris/{version}
version: v0  # increment only for API-breaking updates (TODO: way to auto insert config's version?)
documentation:
    - title: An API for predicting Iris Varieties
      content: |
        Plants are not very intelligent. Some don't even know who they are.
        They need our help.

# RESTful basics:
# URL paths are resource names (in plural form):
# /books  -- all books
# /books/aBookId  -- one specific book
#
# No verbs in URL. Verbs are the standard HTTP actions:
#  get:    get resource item(s), with e.g. query parameters: search (one or many)
#  post:   create new resource item
#  put:    update an existing resource item
#  delete: delete an existing resource item
#
# These actions can be used on collections (like /books), or items
# (like /books/aBookId) and might have different meanings depending on that.


# Not sure whether basicauth is in scope at all for the RAML definition
# as it has no influence on the parameters (I think), except if you count
# the 'Authorization: Basic <base64 encoded name:pw>' header
securitySchemes:
 - basic:
      description: For testing purposes. We might need more elaborate auth eventually.
      type: Basic Authentication
      settings:  # Not needed for basic authentication, but parser requires it
        requestTokenUri:
        authorizationUri:
        tokenCredentialsUri:



# schemas:  # or: type?
#  - prediction_result: |
#      {
#        "type": "object",
#        "$schema": "http://json-schema.org/draft-03/schema",
#        "id": "http://jsonschema.net",
#        "required": true,
#        "properties": {
#          "iris_variety": {
#            "type": "string",
#            "required": true,
#            "enum": ["Virginica", "Versicolor", "Setosa"]
#          },
#          "probability": {
#            "type": "number",
#            "required": false
#          }
#        }
#      }


/varieties:
  get:
    description: Get a prediction for the variety of iris flower based on measurements of physical petal and sepal dimensions
    queryParameters:
      sepal.length:
        displayName: Sepal Length
        type: number
        description: Measured length of iris flower sepals (flower leaves)
        example: 3.14
        required: false  # test, should be true
        minimum: 0
      sepal.width:
        displayName: Sepal Width
        type: number
        description: Measured width of iris flower sepals (flower leaves)
        example: 3.14
        required: false  # test, should be true
        minimum: 0
      petal.length:
        displayName: Petal Length
        type: number
        description: Measured length of iris flower petals
        example: 3.14
        required: false  # test, should be true
        minimum: 0
      petal.width:
        displayName: Petal Width
        type: number
        description: Measured width of iris flower petals
        example: 3.14
        required: false  # test, should be true
        minimum: 0
        #minimum: -39  # for numbers or integers
        #maximum: 100  # for numbers or integers
        #minLength: 3  # for strings
        #maxLength: 100  # for strings
        #default: 0
    responses:
      200:  # OK
        body:
          application/json:
            schema: | #prediction_result  # or type: ...?
              {
                "type": "object",
                "$schema": "http://json-schema.org/draft-03/schema",
                "id": "http://jsonschema.net",
                "required": true,
                "properties": {
                  "iris_variety": {
                    "type": "string",
                    "required": true,
                    "enum": ["Virginica", "Versicolor", "Setosa"]
                  },
                  "probability": {
                    "type": "number",
                    "required": false
                  }
                }
              }
            example: |
              {
                "iris_variety": "Setosa"
              }
      # 404:  # Not Found (applicable to Ids, but not really for predictions based on data)
      #  body:
      #    application/json:
      #      example: |
      #        { "message": "Iris not found" }
  /{test_key}: # just to test
    get:
      queryParameters:
        hallo:
          description: some demo query parameter in addition to the uri param
          type: string
          required: true
          enum: ['metric', 'imperial']
          #default: 42

# Accepting files example (e.g. for image recognition)
#...resource...
#post:
#  description: |
#    Enters the file content for an existing song entity.
#
#    Use the "binary/octet-stream" content type to specify the content from any consumer (excepting web-browsers).
#    Use the "multipart-form/data" content type to upload a file which content will become the file-content
#  body:
#    binary/octet-stream:
#    multipart/form-data:
#      properties:
#        file:
#          description: The file to be uploaded
#          required: true
#          type: file

# Accepting json body content example (e.g. for more complex prediciton input/params)
#body:
#  application/json:
#    type: |
#      {
#        "type": "object",
#        "$schema": "http://json-schema.org/draft-03/schema",
#        "id": "http://jsonschema.net",
#        "required": true,
#        "properties": {
#          "songTitle": {
#            "type": "string",
#            "required": true
#          },
#          "albumId": {
#            "type": "string",
#            "required": true,
#            "minLength": 36,
#            "maxLength": 36
#          }
#        }
#      }
#    example: |
#      {
#        "songId": "550e8400-e29b-41d4-a716-446655440000",
#        "songTitle": "Get Lucky",
#        "albumId": "183100e3-0e2b-4404-a716-66104d440550"
#      }



#/authors:
#/books:
#  get:
#  put:
#  post:
#  /{bookTitle}:
#    get:
#    put:
#    delete:
#    /author:
#      get:
#    /publisher:
#      get:
